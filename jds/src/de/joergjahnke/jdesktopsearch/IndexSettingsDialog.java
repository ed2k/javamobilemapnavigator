/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation. For the full
 * license text, see http://www.gnu.org/licenses/lgpl.html.
 */
package de.joergjahnke.jdesktopsearch;


import java.util.Properties;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 * Dialog to edit the index settings
 *
 * @author Jörg Jahnke (joergjahnke@users.sourceforge.net)
 */
public class IndexSettingsDialog extends javax.swing.JDialog {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	// properties to edit
    private final Properties properties;
    // old index is now invalid
    private boolean isIndexInvalid = false;
    // the dialog was confirmed using the OK button?
    private boolean wasApproved = false;
    
    
    /**
     * Creates new form IndexSettingsDialog
     */
    public IndexSettingsDialog( JFrame parent, Properties properties ) {
        super( parent, "Edit Index Settings", true );
        
        initComponents();
        pack();
        
        // copy properties and translate the individual settings to the JComponents
        this.properties = properties;
        
        // general settings
        final String[] indexer_types = { "lucene", "sqlserver" };
        
        this.jListIndexerType.setListData( indexer_types );
        this.jListIndexerType.setSelectedValue( this.properties.getProperty( "indexer_type" ), true );
        this.jTextFieldIndexName.setText( this.properties.getProperty( "index_name" ) );
        this.jTextFieldFileTypesFull.setText( this.properties.getProperty( "file_types" ) );
        this.jTextFieldFileTypesProp.setText( this.properties.getProperty( "properties_only_file_types" ) );
        this.jCheckBoxDoIndexHidden.setSelected( Boolean.toString( true ).equals( this.properties.getProperty( "do_index_hidden" ) ) );
        
        String excluded = "";
        
        if( null != this.properties.getProperty( "excluded_files" ) ) {
            excluded = this.properties.getProperty( "excluded_files" ).replaceAll( "\\.\\*", "\\*" ).replaceAll( "\\\\\\.", "\\." ).replaceAll( "\\\\\\\\", "\\\\" );
        }
        this.jTextFieldExlusions.setText( excluded );
        
        // settings for sql servers
        final String[] sqlserver_versions = { "7.0", "8.0" };
        
        this.jListSQLVersion.setListData( sqlserver_versions );
        
        if( "sqlserver".equals( this.properties.getProperty( "indexer_type" ) ) ) {
            this.jListSQLVersion.setSelectedValue( this.properties.getProperty( "sqlserver_version" ), true );
            this.jTextFieldSQLName.setText( this.properties.getProperty( "sqlserver_name" ) );
            
            int port = -1;
            
            try { port = Integer.parseInt( this.properties.getProperty( "sqlserver_port" ) ); } catch( NumberFormatException e ) {}
            
            this.jTextFieldSQLPort.setText( port < 0 ? "default" : new Integer( port ).toString() );
            this.jTextFieldSQLUser.setText( this.properties.getProperty( "sqlserver_user" ) );
            this.jPasswordFieldSQLPassword.setText( this.properties.getProperty( "sqlserver_password" ) );
        }
        
        pack();
        setLocation( parent.getX() + (int)( parent.getWidth() - getWidth() ) / 2, parent.getY() + (int)( parent.getHeight() - getHeight() ) / 2 );
    }
    
    
    /**
     * Check whether the dialog was finished using the OK button
     *
     * @return  true if the changes where confirmed using the OK button, otherwise false
     */
    public boolean wasApproved() {
        return this.wasApproved;
    }
    
    
    /**
     * Invalidate the existing index.
     * If invalidated by settings changes the old index needs to be rebuilt.
     */
    private final void invalidateOldIndex() {
        this.isIndexInvalid = true;
    }
    
    /**
     * Check if the existing index has been made invalid by changes to the settings
     *
     * @return  true if the old index is invalid and needs to be rebuilt
     */
    public boolean isOldIndexInvalid() {
        return this.isIndexInvalid;
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelGeneral = new javax.swing.JPanel();
        jPanelGeneralSettings = new javax.swing.JPanel();
        jLabelIndexerType = new javax.swing.JLabel();
        jListIndexerType = new javax.swing.JList();
        jLabelIndexName = new javax.swing.JLabel();
        jTextFieldIndexName = new javax.swing.JTextField();
        jLabelFileTypesFull = new javax.swing.JLabel();
        jTextFieldFileTypesFull = new javax.swing.JTextField();
        jLabelFileTypesProp = new javax.swing.JLabel();
        jTextFieldFileTypesProp = new javax.swing.JTextField();
        jLabelDoIndexHidden = new javax.swing.JLabel();
        jCheckBoxDoIndexHidden = new javax.swing.JCheckBox();
        jLabelExclusion = new javax.swing.JLabel();
        jTextFieldExlusions = new javax.swing.JTextField();
        jPanelGeneralButtons = new javax.swing.JPanel();
        jButtonOK1 = new javax.swing.JButton();
        jButtonCancel1 = new javax.swing.JButton();
        jPanelSQLServerSettings = new javax.swing.JPanel();
        jPanelSQLServer = new javax.swing.JPanel();
        jLabelSQLVersion = new javax.swing.JLabel();
        jListSQLVersion = new javax.swing.JList();
        jLabelSQLName = new javax.swing.JLabel();
        jTextFieldSQLName = new javax.swing.JTextField();
        jLabelSQLPort = new javax.swing.JLabel();
        jTextFieldSQLPort = new javax.swing.JTextField();
        jLabelSQLUser = new javax.swing.JLabel();
        jTextFieldSQLUser = new javax.swing.JTextField();
        jLabelSQLPassword = new javax.swing.JLabel();
        jPasswordFieldSQLPassword = new javax.swing.JPasswordField();
        jPanelSQLServerButtons = new javax.swing.JPanel();
        jButtonOK3 = new javax.swing.JButton();
        jButtonCancel3 = new javax.swing.JButton();

        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });

        jPanelGeneral.setLayout(new java.awt.BorderLayout());

        jPanelGeneralSettings.setLayout(new java.awt.GridLayout(0, 2));

        jLabelIndexerType.setText("Indexer-Type");
        jLabelIndexerType.setToolTipText("Choose Lucene indexer if unsure, sql server indexing uses less memory especially for large indexes");
        jPanelGeneralSettings.add(jLabelIndexerType);

        jListIndexerType.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jPanelGeneralSettings.add(jListIndexerType);

        jLabelIndexName.setText("Index-Name");
        jLabelIndexName.setToolTipText("Name and, for Lucene indexes, path of the index");
        jPanelGeneralSettings.add(jLabelIndexName);

        jTextFieldIndexName.setText("JDesktopSearch");
        jPanelGeneralSettings.add(jTextFieldIndexName);

        jLabelFileTypesFull.setText("File-Types for full document indexing");
        jLabelFileTypesFull.setToolTipText("comma-separated list of file extensions where the document contents are parsed and included in the index");
        jPanelGeneralSettings.add(jLabelFileTypesFull);

        jPanelGeneralSettings.add(jTextFieldFileTypesFull);

        jLabelFileTypesProp.setText("File-Types for properties indexing");
        jLabelFileTypesProp.setToolTipText("comma-separated list of file extensions where only the file name is included in the index");
        jPanelGeneralSettings.add(jLabelFileTypesProp);

        jPanelGeneralSettings.add(jTextFieldFileTypesProp);

        jLabelDoIndexHidden.setText("Index hidden files and folders");
        jLabelDoIndexHidden.setToolTipText("Normally hidden files and folders are not included in the index. The this checkbox to include such files and have them appear as search results.");
        jPanelGeneralSettings.add(jLabelDoIndexHidden);

        jPanelGeneralSettings.add(jCheckBoxDoIndexHidden);

        jLabelExclusion.setText("File patterns to exclude");
        jLabelExclusion.setToolTipText("comma separated list of file-patterns to exclude from search e.g. D:\\*,E:\\* will exclude the drives D and E on a Windows system");
        jPanelGeneralSettings.add(jLabelExclusion);

        jPanelGeneralSettings.add(jTextFieldExlusions);

        jPanelGeneral.add(jPanelGeneralSettings, java.awt.BorderLayout.CENTER);

        jButtonOK1.setText("OK");
        jButtonOK1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanelGeneralButtons.add(jButtonOK1);

        jButtonCancel1.setText("Cancel");
        jButtonCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanelGeneralButtons.add(jButtonCancel1);

        jPanelGeneral.add(jPanelGeneralButtons, java.awt.BorderLayout.SOUTH);

        jTabbedPane.addTab("General", null, jPanelGeneral, "General indexing settings");

        jPanelSQLServerSettings.setLayout(new java.awt.BorderLayout());

        jPanelSQLServer.setLayout(new java.awt.GridLayout(0, 2));

        jLabelSQLVersion.setText("Version");
        jLabelSQLVersion.setToolTipText("SQL Server version, 7.0 is for SQL Server 7.0, 8.0 is for SQL Server 2000 and higher as well as for MSDE 2000 and higher");
        jPanelSQLServer.add(jLabelSQLVersion);

        jListSQLVersion.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jPanelSQLServer.add(jListSQLVersion);

        jLabelSQLName.setText("Name");
        jLabelSQLName.setToolTipText("Name of the computer where the SQL server is installed, set to \"localhost\" if you have the SQL server on your local machine");
        jPanelSQLServer.add(jLabelSQLName);

        jTextFieldSQLName.setText("localhost");
        jPanelSQLServer.add(jTextFieldSQLName);

        jLabelSQLPort.setText("Port Number");
        jLabelSQLPort.setToolTipText("SQL server port to connect to, set to \"default\" if you use the default port or are unsure");
        jPanelSQLServer.add(jLabelSQLPort);

        jTextFieldSQLPort.setText("default");
        jPanelSQLServer.add(jTextFieldSQLPort);

        jLabelSQLUser.setText("User");
        jLabelSQLUser.setToolTipText("SQL server user to use for the connection");
        jPanelSQLServer.add(jLabelSQLUser);

        jPanelSQLServer.add(jTextFieldSQLUser);

        jLabelSQLPassword.setText("Password");
        jLabelSQLPassword.setToolTipText("Password to use for the connection to the server");
        jPanelSQLServer.add(jLabelSQLPassword);

        jPanelSQLServer.add(jPasswordFieldSQLPassword);

        jPanelSQLServerSettings.add(jPanelSQLServer, java.awt.BorderLayout.CENTER);

        jButtonOK3.setText("OK");
        jButtonOK3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jPanelSQLServerButtons.add(jButtonOK3);

        jButtonCancel3.setText("Cancel");
        jButtonCancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanelSQLServerButtons.add(jButtonCancel3);

        jPanelSQLServerSettings.add(jPanelSQLServerButtons, java.awt.BorderLayout.SOUTH);

        jTabbedPane.addTab("SQL Server Settings", null, jPanelSQLServerSettings, "Edit SQL Server settings if index is hosted on a SQL Server database");

        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        setVisible( false );
        dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // copy general settings into properties
        this.properties.setProperty( "index_name", this.jTextFieldIndexName.getText() );
        this.properties.setProperty( "indexed_files_name", this.jTextFieldIndexName.getText().endsWith( ".index" ) ? this.jTextFieldIndexName.getText().replaceAll( ".index", ".indexedFiles" ) : this.jTextFieldIndexName.getText() + ".indexedFiles" );
        this.properties.setProperty( "properties_only_file_types", this.jTextFieldFileTypesProp.getText() );
        this.properties.setProperty( "file_types", this.jTextFieldFileTypesFull.getText() );
        this.properties.setProperty( "do_index_hidden", new Boolean( this.jCheckBoxDoIndexHidden.isSelected() ).toString() );
        // create correct regular expression from the given file wildcards: Replace "." by "\.", "*" by ".*" and "\" by "\\"
        this.properties.setProperty( "excluded_files", this.jTextFieldExlusions.getText().replaceAll( "\\\\", "\\\\\\\\" ).replaceAll( "\\.", "\\\\\\." ).replaceAll( "\\*", "\\.\\*" ) );
        
        if( ! this.jListIndexerType.getSelectedValue().toString().equals( this.properties.getProperty( "indexer_type" ) ) ) {
            this.properties.setProperty( "indexer_type", this.jListIndexerType.getSelectedValue().toString() );
            // a change of the indexer invalidates the existing index
            invalidateOldIndex();
        }

        if( "sqlserver".equals( this.properties.getProperty( "indexer_type" ) ) ) {
            // copy sql server settings into properties
            this.properties.setProperty( "sqlserver_version", this.jListSQLVersion.getSelectedValue().toString() );
            this.properties.setProperty( "sqlserver_password", new String( this.jPasswordFieldSQLPassword.getPassword() ) );
            this.properties.setProperty( "sqlserver_user", this.jTextFieldSQLUser.getText() );

            final String portValue = this.jTextFieldSQLPort.getText();

            try {
                int port = "default".equals( portValue ) || "".equals( portValue ) ? -1 : Integer.parseInt( portValue );
                this.properties.setProperty( "sqlserver_port", new Integer( port ).toString() );
            } catch( NumberFormatException e ) {
                JOptionPane.showMessageDialog( this, "Port number must be an integer denoting the port or either 'default' or empty to use the default SQL Server port!", "Incorrect port number", JOptionPane.PLAIN_MESSAGE );
            }

            this.properties.setProperty( "sqlserver_name", this.jTextFieldSQLName.getText() );
        }
        
        this.wasApproved = true;
        setVisible( false );
        dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneStateChanged
        pack();
    }//GEN-LAST:event_jTabbedPaneStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel1;
    private javax.swing.JButton jButtonCancel3;
    private javax.swing.JButton jButtonOK1;
    private javax.swing.JButton jButtonOK3;
    private javax.swing.JCheckBox jCheckBoxDoIndexHidden;
    private javax.swing.JLabel jLabelDoIndexHidden;
    private javax.swing.JLabel jLabelExclusion;
    private javax.swing.JLabel jLabelFileTypesFull;
    private javax.swing.JLabel jLabelFileTypesProp;
    private javax.swing.JLabel jLabelIndexName;
    private javax.swing.JLabel jLabelIndexerType;
    private javax.swing.JLabel jLabelSQLName;
    private javax.swing.JLabel jLabelSQLPassword;
    private javax.swing.JLabel jLabelSQLPort;
    private javax.swing.JLabel jLabelSQLUser;
    private javax.swing.JLabel jLabelSQLVersion;
    private javax.swing.JList jListIndexerType;
    private javax.swing.JList jListSQLVersion;
    private javax.swing.JPanel jPanelGeneral;
    private javax.swing.JPanel jPanelGeneralButtons;
    private javax.swing.JPanel jPanelGeneralSettings;
    private javax.swing.JPanel jPanelSQLServer;
    private javax.swing.JPanel jPanelSQLServerButtons;
    private javax.swing.JPanel jPanelSQLServerSettings;
    private javax.swing.JPasswordField jPasswordFieldSQLPassword;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextFieldExlusions;
    private javax.swing.JTextField jTextFieldFileTypesFull;
    private javax.swing.JTextField jTextFieldFileTypesProp;
    private javax.swing.JTextField jTextFieldIndexName;
    private javax.swing.JTextField jTextFieldSQLName;
    private javax.swing.JTextField jTextFieldSQLPort;
    private javax.swing.JTextField jTextFieldSQLUser;
    // End of variables declaration//GEN-END:variables
    
}
