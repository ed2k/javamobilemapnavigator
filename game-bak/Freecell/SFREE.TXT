Sfree 使用说明:
主窗口标题:显示当前牌费用值
菜单功能:
 Game:   {Game游戏菜单}
  NewGame    {New Game 菜单,随机发一副牌}
  Replay     {重新玩}
  Save   {Save 选项,保存当前牌型}
  Open   {选择一副以前保存的牌}
  Undo   {Undo 选项,取消刚才的移动牌的操作}
 AI:     {Ai菜单,计算机自动移动牌(按住任意键则连续移动)}
 Input:    {Input 输入菜单}
  Parameter     {Paremeters... 选项,弹出修改计算牌型费用值的参数的对话窗口}
      L0: 某列牌长度费用乘数
      L1: 某列牌乱序长度费用乘数
      L2: 某列牌成顺长度费用乘数
      L3: 空栈乘数
      L4: 没有使用
      L5: 期望费用减小值
  Pai1941{内置三副牌之1}
  Pai19  {内置三副牌之2} 
  Sunfree {内置三副牌之3}  
Help:   {Help帮助菜单}
游戏规则描述:可以参考Microsoft Freecell之游戏说明

Sfree技术文档:
Freecell是windows 95系统自身携带的一个游戏程序,我在玩的过程中感觉它的规则描述和人工玩牌都有一定的难度,编制计算机解Freecell程序可以作为学习人工智能的有效手段.
  系统设计概述:
  从界面风格上我着意模仿原游戏程序的风格.逻辑结构上,我以Tpaiju类,Tpai类为主要描述手段.其中sys是一个Tpaiju类,它记录游戏者所看见的牌的摆放的逻辑记录.pai是一个Tpai类,它既是牌的Bmp图形的存放所在又是牌自身位置的记录结构.
对应左上角的四个空和右上角的四个空,我分别用sys.st2[0..3]和sys.st1[0..3]记录.下半部分的牌我用sys.st3[0..7][-1..20]记录.由于开始设计时的大手大脚sys.st3中有一些单元没有使用.
对于牌移动的记录,我用Tmv类记录,它包含在Tpaiju之中.由于初始版本和后继版本表示上的不一致,Tmv中存放的记录在程序的不同位置分别有两种含义,但是他们的设计思想是一致的.我用不同的整数型常量值代表不同的牌的移动,例如:pai[p].x:=s1+i;表示牌P在栈1的第I个槽中,mv.m[i]:=s3tos2+10*i+j;表示第I-1步移动是栈3的第J槽的牌移动到栈2的第I个空中,其中s2,s3tos2都是常量(具体请参考源程序的注释).  
计算机搜索是以当前牌局为出发点,希望费用减少值为目的的A算法搜索方式.对于每一个牌局我都估计出它到达游戏终止的费用以牌局为节点,对于费用较少的牌局优先搜索,当某节点费用比初始牌局减少的值达到要求或该节点的费用小于给定值时(程序中设置为500,游戏终止时的费用值为0),搜索成功返回.由于计算机内存有限,以及节点记录比较庞大,程序中只设置了允许扩展2000个节点.
游戏规则描述:
对应界面中的三类放牌位置分别有st1[0..3],st2[0..3],st3[0..7][-1..20]表示,我分别称呼他们为栈1,栈2和栈3.栈1之中每一列放一种花色,我定义st1[0]到st1[3]分别放黑桃,红桃,方块和草花,每一种花色从小到大依次摆放,即同一种花色小牌没有放上去,大牌不能放上去.当所有的牌都放在了栈1,游戏成功,放在栈1的牌不能拿出放在其他栈中.栈2每一个槽只能放一张牌,而且放在栈2的牌可以拿出放到其他栈中.栈3有7列,初始时前四列每列放7张牌,后四列每列放6张牌.每列最后一张牌可以移动至其他栈,当这张牌移动至栈3其他列时必须满足该牌与那一列的最后一张牌成链,所谓成链指的是上面一张牌与下面一张牌红黑花色相间,上面一张牌的点数比下面一张牌的点数多一.栈2到栈3的牌移动规则相同.
注:本程序在栈3之间移动牌时,为了节省搜索步数,将成链的几张牌在规则的允许下一块儿移动.
程序说明:
